
;; <xtm/09-pentatonic-scale.xtm>
;; <setup-tuner-osc>
;; <load-instruments>
(sys:load "libs/core/instruments.xtm")
;; </load-instruments>
;; <tuner-note-osc>
(bind-func tuner_note
  (lambda ()
    ;; here you can put init of entire instrument
    (lambda (data:NoteData* nargs:i64 dargs:SAMPLE*)
      ;; here init of certain note
      (let ((frequency (note_frequency data))
            (amplitude (note_amplitude data))
            (starttime (note_starttime data))
            (duration (note_duration data))
            (carrier (osc_c 0.0)))
        (lambda (time:i64 chan:i64)
          ;; here we produce samples for this note
          (if (< (- time starttime) duration)
              (carrier amplitude frequency)
              0.0))))))
;; </tuner-note-osc>
;; <tuner-fx>
(bind-func tuner_fx
  (lambda ()
    ;; here put fx init
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      in)))
;; </tuner-fx>
;; <make-tuner>
(make-instrument tuner tuner)
;; </make-tuner>
;; <tuner-dsp>
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (tuner in time chan dat)))
;; </tuner-dsp>
;; <set-dsp>
(dsp:set! dsp)
;; </set-dsp>
;; </setup-tuner-osc>
;; <make-pentatonic-scale>
;; <make-pentatonic-scale-freq>
(define make-pentatonic-scale-freq
  (lambda (freq0)
    (map (lambda (x) (* x freq0))
         '(1 9/8 3/2 5/4 3/2 5/3))))
;; </make-pentatonic-scale-freq>

(define make-pentatonic-scale
  (lambda (start-note)
    (map frq2midi (make-pentatonic-scale-freq (midi2frq start-note)))))
;; </make-pentatonic-scale>
;; <play-pentatonic-scale>
;; <play-chord>
(define play-chord
  (lambda (t inst pitches dur)
    (let ((together-time (+ t (* 2 (length pitches) dur))))
      (for-each
       (lambda (i pitch)
         (play-note (+ t (* 2 i dur)) inst pitch 100 dur)
         (play-note together-time inst pitch 100 dur))
       (range (length pitches))
       pitches))))
;; </play-chord>

(play-chord (now) tuner (make-pentatonic-scale 60) *second*)
;; </play-pentatonic-scale>
;; 
;; </xtm/09-pentatonic-scale.xtm>
